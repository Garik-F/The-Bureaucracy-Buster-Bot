import os
import asyncio
import requests
import nest_asyncio
from urllib.error import HTTPError
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_core.documents import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_core.prompts import ChatPromptTemplate
from langchain.chains import create_retrieval_chain
from langchain_community.vectorstores import FAISS
from langchain.chains.combine_documents import create_stuff_documents_chain
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from langchain_huggingface import HuggingFaceEmbeddings
from dotenv import load_dotenv
import logging


load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7805795694:AAGsKBwBxlkoYw9Vs9wfV8wxhzAl3fk1Uwk"
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'))
main_keyboard.add(KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ'))
main_keyboard.add(KeyboardButton('üìö –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤'))

# –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
examples_keyboard = InlineKeyboardMarkup()
examples_keyboard.add(InlineKeyboardButton("–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å?", callback_data="example1"))
examples_keyboard.add(InlineKeyboardButton("–ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –≤–∏–¥—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤?", callback_data="example2"))
examples_keyboard.add(InlineKeyboardButton("–ß—Ç–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —Å–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ?", callback_data="example3"))

def initialize_rag_system():
    urls = []
    base_url = 'https://www.consultant.ru/document/cons_doc_LAW_10699/'
    responseq = requests.get(base_url)
    html_code = responseq.text
    web_code = BeautifulSoup(html_code, 'html.parser')

    def page_search(web_code, base_url):
        links = set()
        for link in web_code.find_all('a', href=True):
            full_url = urljoin(base_url, link['href'])
            parsed = urlparse(full_url)
            if parsed.netloc == urlparse(base_url).netloc:
                if not parsed.fragment:
                    links.add(full_url)
        return sorted(list(links))

    urls = page_search(web_code, base_url)

    def fetch_website_content(url):
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
                
            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            content = soup.find('article') or soup.find('main') or soup.find('body')
            if content:
                # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
                for script in content(['script', 'style']):
                    script.decompose()
                return content.get_text(separator='\n', strip=True)
            return ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
            return ""

    documents = []
    for url in urls:
        content = fetch_website_content(url)
        if content and len(content) > 100:  # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            documents.append(Document(page_content=content))
        
    if not documents:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=600,
        chunk_overlap=100,
        length_function=len,
        add_start_index=True
    )
    chunks = text_splitter.split_documents(documents)

    embeddings = HuggingFaceEmbeddings(model_name="cointegrated/LaBSE-en-ru")
    vectorstore = FAISS.from_documents(chunks, embeddings)
    retriever = vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 3})

    llm = ChatOpenAI(api_key=OPENAI_KEY, model="gpt-4")

    system_template = """
    –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º-–æ—Ç–≤–µ—Ç–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é,
    —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –æ—Ç–≤–µ—Ç—å '–ù–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å'.
    –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –±—É–¥—å —Ç–æ—á–Ω—ã–º –Ω–æ –∫—Ä–∞—Ç–∫–∏–º.
    """

    qa_prompt = ChatPromptTemplate.from_messages([
        ("system", system_template),
        ("human", """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

            {context}

            –í–æ–ø—Ä–æ—Å: {input}
        """),
    ])

    document_chain = create_stuff_documents_chain(llm, qa_prompt)
    rag_chain = create_retrieval_chain(retriever, document_chain)
    
    return rag_chain

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
rag_chain = initialize_rag_system()

def ask_question(question):
    response = rag_chain.invoke({"input": question})
    return response["answer"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—é—Ä–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

@dp.message_handler(lambda message: message.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')
async def about_bot(message: types.Message):
    await message.answer(
        "ü§ñ –Ø - –±–æ—Ç-—é—Ä–∏—Å—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.\n"
        "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )

@dp.message_handler(lambda message: message.text == 'üìö –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤')
async def show_examples(message: types.Message):
    await message.answer(
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:",
        reply_markup=examples_keyboard
    )

@dp.message_handler(lambda message: message.text == '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def ask_question_prompt(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

@dp.callback_query_handler(lambda c: c.data.startswith('example'))
async def process_example_question(callback_query: types.CallbackQuery):
    example_questions = {
        "example1": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å?",
        "example2": "–ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –≤–∏–¥—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤?",
        "example3": "–ß—Ç–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —Å–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ?"
    }
    question = example_questions[callback_query.data]
    answer = ask_question(question)
    await bot.send_message(callback_query.from_user.id, f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n\nüí° –û—Ç–≤–µ—Ç: {answer}")

@dp.message_handler()
async def handle_question(message: types.Message):
    if message.text not in ['‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', '‚ÑπÔ∏è –û –±–æ—Ç–µ', 'üìö –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤']:
        await message.answer("üîç –ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        try:
            answer = ask_question(message.text)
            await message.answer(answer)
        except Exception as e:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"Error: {e}")

if __name__ == '__main__':
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        nest_asyncio.apply()
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")